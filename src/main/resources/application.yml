app:
  schema: ${APP_SCHEMA:ac} # Default schema for the application
  name: ${APP_NAME:User API} # Name of the application
  version: ${APP_VERSION:1.0.0} # Version of the application
  description: ${APP_DESCRIPTION:User API} # Description of the application
  profile: ${APP_PROFILE:dev} # Active profile (dev, test, prod)

log:
  level:
  root: ${LOG_LEVEL:INFO} # Default log level
  com:
    glign: ${LOG_LEVEL_COM_EXAMPLE:DEBUG} # Log level for specific package

server:
  port: ${SERVER_PORT:8080}
  http2:
    enabled: ${SERVER_HTTP2_ENABLED:true} # Enable HTTP/2 support
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024 # Minimum response size in bytes to apply compression
  jetty:
    connection-idle-timeout: ${SERVER_JETTY_IDLE_TIMEOUT:10000} # 10 seconds

# Database
spring:
  web:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:8080} # Comma-separated list of allowed origins
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS} # Comma-separated list of allowed methods
      allowed-headers: ${CORS_ALLOWED_HEADERS:Content-Type,Authorization} # Comma-separated list of allowed headers
      allow-credentials: true
  sql:
    init:
      mode: ${DB_INIT_MODE:never} # always, never, embedded
      platform: ${DB_PLATFORM:h2} # h2, postgres
      schema-locations: classpath:/db/init/schema.sql
      data-locations: classpath:/db/init/data.sql
  datasource:
    url: ${DB_URL:jdbc:h2:mem:userdb} # jdbc:h2:mem:userdb for H2 in-memory | jdbc:postgresql://localhost:5432/userdb for PostgreSQL
    driver-class-name: ${DB_DRIVER_CLASS_NAME:org.h2.Driver} # org.postgresql.Driver for PostgreSQL
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:password}
    hikari:
      max-lifetime: ${DB_MAX_LIFETIME:1800000} # 30 minutes
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000} # 30 seconds
      idle-timeout: ${DB_IDLE_TIMEOUT:600000} # 10 minutes
      minimum-idle: ${DB_MINIMUM_IDLE:5} # Minimum number of idle connections
      maximum-pool-size: ${DB_MAXIMUM_POOL_SIZE:10} # Maximum number of connections in the pool
      pool-name: ${DB_POOL_NAME:UserDBPool}
  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:false} # true to enable H2 console
      path: /h2-console
  jpa:
    database-platform: ${DB_DIALECT:org.hibernate.dialect.H2Dialect} # org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: ${DB_GENERATE_DDL:false} # true to generate DDL
    show-sql: ${DB_SHOW_SQL:false}
    hibernate:
      ddl-auto: ${DB_DDL_AUTO:none} # none, validate, update, create, create-drop
    properties:
      hibernate:
        dialect: ${DB_DIALECT:org.hibernate.dialect.H2Dialect} # org.hibernate.dialect.PostgreSQLDialect
        format_sql: ${DB_FORMAT_SQL:false}
        show_sql: ${DB_SHOW_SQL:false}
      default_schema: ${DB_SCHEMA:ac}
      hbm2ddl:
        create_namespaces: ${DB_CREATE_NAMESPACES:false}
  devtools:
    livereload:
      enabled: ${DEVTOOLS_LIVERELOAD_ENABLED:false}

# JWT
jwt:
  secret: ${JWT_SECRET:theSecretKeyThatIsAtLeast64CharactersLong} # Secret key for signing JWT tokens
  expiration: ${JWT_EXP:3600000} # 1 hour in milliseconds

# Password regex
regexes:
  password: "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$"
  email: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"

userApi:
  application:
    user: ${APP_USER:system}
  openapi:
    dev-url: http://localhost:${SERVER_PORT:8080}
    prod-url: ${PROD_DOMAIN:https://user-api.com}:${PROD_PORT:8080}
    name: "User API"
    email: "test@local.com"

memcached:
  host: ${MEMCACHED_HOST:localhost}
  port: ${MEMCACHED_PORT:11211}